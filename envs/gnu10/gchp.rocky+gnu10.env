###############################################################################
# gchp.rocky+gnu10.env
#
# Environment file for GCHP + Rocky Linux + GNU Compiler Collection 10.2.0
###############################################################################

# Display message (if we are in a terminal window)
if [[ $- = *i* ]] ; then
  echo "Loading modules for GCHP, please wait ..."
fi

#==============================================================================
# Setup the Spack environment if it has not been done yet
#==============================================================================
if [[ "x${SPACK_ROOT}" == "x" ]]; then
    if [[ $- = *i* ]] ; then
	echo "... Initializing Spack (one-time only), please wait ..."
    fi
    . /n/jacob_lab/Lab/RockyLinux/spack/share/spack/setup-env.sh
fi

#==============================================================================
# Also update the MODULEPATH if we have not done it yet
# This is so Lmod can find Spack-generated modulefiles
#==============================================================================
if [[ ! "spack" =~ "${MODULEPATH}" ]]; then
    if [[ $- = *i* ]] ; then
	echo "... Updating module paths, please wait ..."
    fi
    export SPACK_MODULE_ROOT="${SPACK_ROOT}/share/spack/lmod/linux-rocky8-x86_64"
    export MODULEPATH+=":${SPACK_MODULE_ROOT}/Core"
    export MODULEPATH+=":${SPACK_MODULE_ROOT}/gcc/10.2.0"
    export MODULEPATH+=":${SPACK_MODULE_ROOT}/openmpi/4.1.0-62i34f7/gcc/10.2.0"
    export MODULEPATH+=":${SPACK_MODULE_ROOT}/gcc/12.2.0"
    export MODULEPATH+=":${SPACK_MODULE_ROOT}/openmpi/4.1.4-6yi53gp/gcc/12.2.0"
fi

#==============================================================================
# Unload all previously-unloaded software
#==============================================================================

# Unload packages loaded with "module load"
module purge

# Unload packages loaded with "spack load"
if [[ "x${SPACK_ROOT}" != "x" ]]; then
    spack unload --all
fi

#==============================================================================
# Load FASRC-built software packages for Rocky Linux and GNU 10.2.0
#==============================================================================
if [[ $- = *i* ]] ; then
  echo "... Loading FASRC-built software, please wait..."
fi

# Load FASRC-built modules
module load gcc/10.2.0-fasrc01             # gcc / g++ / gfortran
module load openmpi/4.1.0-fasrc01          # MPI
module load netcdf-c/4.8.0-fasrc01         # netcdf-c
module load netcdf-fortran/4.5.3-fasrc01   # netcdf-fortran
module load flex/2.6.4-fasrc01             # Flex lexer (needed for KPP)
module load cmake/3.25.2-fasrc01           # CMake (needed to compile)

# Additional FASRC-built modules
# Uncomment if you need to use these
##module load IDL/8.7.2-fasrc01              # IDL language (needed for GAMAP)
##module load R/4.2.2-fasrc01                # R language
##module load matlab/R2022b-fasrc01          # matlab language

#==============================================================================
# Load Spack-built software packages for Rocky Linux and GNU 10.2.0
#==============================================================================
if [[ $- = *i* ]] ; then
    echo "... Loading Spack-built software, please wait ..."
fi

# Spack modules (built with GNU 8.5.0)
module load bison/3.0.4-gcc-8.5.0          # Dependency for KPP
module load colordiff/1.0.21-gcc-8.5.0     # Colorizes diff output
module load jq/1.6-gcc-8.5.0               # JSON command-line editor
module load openjdk/11.0.17_8-gcc-8.5.0    # Java runtime
module load parallel/20220522-gcc-8.5.0    # GNU Parallel
module load rclone/1.62.2-gcc-8.5.0        # Interface w/ Google Drive

# Spack modules (built with GNU 12.2.0)
module load nco/5.1.4-gcc-10.2.0           # netCDF Operators
module load ncurses/6.4-gcc-10.2.0         # Dependency for ncview
module load ncview/2.1.8-gcc-10.2.0        # ncview (netCDF file viewer)
module load readline/8.2-gcc-10.2.0        # GNU command-line library

# Using "module load cdo" deactivates
# netcdf-fortran/4.5.3-fasrc01 because
# Lmod thinks it is loading a new MPI
# library. Use "spack load" instead.
spack  load cdo@2.1.0%gcc@10.2.0           # Climate Data Operators

#==============================================================================
# Environment variables
# NOTE: <module>_HOME env vars are defined for each loaded <module>
#==============================================================================

# Make all files world-readable by default
umask 022

# Compilers
export CC="gcc"
export CXX="g++"
export FC="gfortran"
export F77="${FC}"

# MPI
export MPI_ROOT="${MPI_HOME}"

# netCDF
if [[ "x${NETCDF_HOME}" == "x" ]]; then
    export NETCDF_HOME="${NETCDF_C_HOME}"
fi
export NETCDF_ROOT="${NETCDF_HOME}"
export NETCDF_FORTRAN_ROOT="${NETCDF_FORTRAN_HOME}"

# ESMF
export ESMF_COMPILER="gfortran"
export ESMF_COMM="openmpi"
export ESMF_DIR="/n/jacob_lab/Lab/RockyLinux/ESMF/ESMF_8_4_2"
export ESMF_INSTALL_PREFIX="${ESMF_DIR}/INSTALL_gnu10_openmpi4"
export ESMF_ROOT="${ESMF_INSTALL_PREFIX}"
#---------------------------------------------------------------------------
# ESMF does not build with GCC10 without the following work-around
# for a type mismatch error (https://trac.macports.org/ticket/60954)
export ESMF_F90COMPILEOPTS="-fallow-argument-mismatch -fallow-invalid-boz"
#---------------------------------------------------------------------------

# KPP 3.0.0+
export KPP_FLEX_LIB_DIR="${FLEX_HOME}/lib64"

#==============================================================================
# Set limits
#==============================================================================

#ulimit -c unlimited   # coredumpsize
ulimit -u 50000       # maxproc
ulimit -v unlimited   # vmemoryuse
ulimit -s unlimited   # stacksize

#==============================================================================
# Print information
#==============================================================================

module list

echo ""
echo "Environment:"
echo ""
echo "CC                  : ${CC}"
echo "CXX                 : ${CXX}"
echo "FC                  : ${FC}"
echo "ESMF_COMM           : ${ESMF_COMM}"
echo "ESMF_COMPILER       : ${ESMF_COMPILER}"
echo "ESMF_DIR            : ${ESMF_DIR}"
echo "ESMF_INSTALL_PREFIX : ${ESMF_INSTALL_PREFIX}"
echo "ESMF_ROOT           : ${ESMF_ROOT}"
echo "KPP_FLEX_LIB_DIR    : ${KPP_FLEX_LIB_DIR}"
echo "MPI_HOME            : ${MPI_HOME}"
echo "NETCDF_HOME         : ${NETCDF_HOME}"
echo "NETCDF_FORTRAN_HOME : ${NETCDF_FORTRAN_HOME}"
echo ""
echo "Done sourcing ${BASH_SOURCE[0]}"
